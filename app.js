/*
   * Tansaku
   * A search engine of sorts (written more as a proof of concept)
   * 2016 Gautam Mittal
*/

const fs = require('graceful-fs');
const natural = require('natural');
const nj = require(__dirname+'/util/numjs.min');
const util = require(__dirname+'/util/util');

var tokenizer = new natural.WordTokenizer();
natural.PorterStemmer.attach();

// As generated by format.js from index.json as generated by crawl.js
const database = JSON.parse(fs.readFileSync(__dirname+'/formatted.json', 'utf-8'));

function vectorMagnitude(v) {
  v = nj.multiply(v, v);
  var magnitude = 0;
  for (var i = 0; i < v.shape[0]; i++) {
    magnitude += v.get(i);
  }

  var r = Math.sqrt(magnitude);
  return r;
}

function cosineSimilarity(v1, v2) {
  return nj.dot(v1, v2).get(0) / (vectorMagnitude(v1) * vectorMagnitude(v2));
}

function search(query) {
  // Preprocess query string
  query = query.toLowerCase().tokenizeAndStem();

  var queryVector = nj.array(util.vectorize(query, database.vectorIndex));

  var raw_ranks = [];
  var raw_results = [];
  var ranks = [];
  var results = [];

  Object.keys(database).forEach(function (id) {
    if (id != "vectorIndex" && id != "links") {
      raw_ranks.push(cosineSimilarity(queryVector, nj.array(database[id].data)));
      raw_results.push({"title": database[id].title, "url": database[id].url});
    }
  });

  for (var i = 0; i < raw_ranks.length; i++) {
    if (raw_ranks[i] != 0 && !isNaN(raw_ranks[i])) {
      ranks.push(raw_ranks[i]);
      results.push(raw_results[i]);
    }
  }

  console.log(util.sortFromArray(ranks, results)[1]);

}

// If search query contains terms that is not in vectorIndex, cosineSimilarity will return NaN (e.g. "hello world")
search("");
